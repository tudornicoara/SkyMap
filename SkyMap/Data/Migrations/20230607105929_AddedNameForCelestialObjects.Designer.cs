// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkyMap.Data;

#nullable disable

namespace SkyMap.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230607105929_AddedNameForCelestialObjects")]
    partial class AddedNameForCelestialObjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("SkyMap.Entities.CelestialObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CelestialObjectTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DiscoveryDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DiscoverySourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquatorialDiameter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceTemperature")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CelestialObjectTypeId");

                    b.HasIndex("DiscoverySourceId");

                    b.ToTable("CelestialObjects");
                });

            modelBuilder.Entity("SkyMap.Entities.CelestialObjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CelestialObjectTypes");
                });

            modelBuilder.Entity("SkyMap.Entities.DiscoverySource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DiscoverySourceTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateOwner")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscoverySourceTypeId");

                    b.ToTable("DiscoverySources");
                });

            modelBuilder.Entity("SkyMap.Entities.DiscoverySourceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DiscoverySourceTypes");
                });

            modelBuilder.Entity("SkyMap.Entities.CelestialObject", b =>
                {
                    b.HasOne("SkyMap.Entities.CelestialObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("CelestialObjectTypeId");

                    b.HasOne("SkyMap.Entities.DiscoverySource", "DiscoverySource")
                        .WithMany()
                        .HasForeignKey("DiscoverySourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscoverySource");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SkyMap.Entities.DiscoverySource", b =>
                {
                    b.HasOne("SkyMap.Entities.DiscoverySourceType", "Type")
                        .WithMany()
                        .HasForeignKey("DiscoverySourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
